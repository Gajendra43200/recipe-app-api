# ---
# name: Checks

# on: [push]

# jobs: 
#    test-lint:
#      name: Test and Lint
#      runs-on: ubuntu-24.04
#     #  The runner is basically the operating system that we're going to be running the job on.
#     # Next, what we're going to do is we're going to add the steps.
#     # So the steps are the different things that run for the job.
#      steps:
#       - name: Login to  Docker Hub 
#         uses: docker/login-action@v1
#         with:
#           username: ${{secrets.DOCKER_USER}}
#           password: ${secrets.DOCKERHUB_TOKEN}
#       - name: Checkout
#         uses: actions/checkout@v4
#       - name: Test
#         run: docker-compose run --rm app sh -c "python manage.py test" #So this is the command that runs the unit tests on our project.
#       - name: Lint
#         run: docker-compose run --rm app sh -c "flake8"

#So if any of these steps fail, that means they return anything other than exit zero, which is the
# Linux exit signal for successful exit.
# If any of these fail, then the job that is running is going to fail.

# UPDATE: Docker Compose and Ubuntu Runner VID=25
# As a number of students have pointed out in the Q&A, there are two updates to GitHub Actions which break the original code in the video.
# These issues are:
# The docker-compose command has been removed, so you see the error: docker-compose command not found.
# The ubuntu-20-04 runner has been removed, which stops the job running.
# This has already been fixed in the supplementary source code for the project. So if you used the diff link, then you will have the updated version.
# For reference, the updated version of the .github/workflows/checks.yml file will look like this:
---
name: Checks
on: [push]
jobs:
  test-lint:
    name: Test and Lint
    runs-on: ubuntu-24.04
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Test
        run: docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
      - name: Lint
        run: docker compose run --rm app sh -c "flake8"
# This should fix both of these issues.